require 'rake/clean'

CLEAN.include( "glut.#{Config::CONFIG['DLEXT']}", 'glut.c', '*_init.c', '*_wrap.c', '*.o' )
#CLOBBER.include()

$INCLUDES = "-I#{Config::CONFIG['archdir']}"
$CFLAGS   = "#{Config::CONFIG['CFLAGS']}"
$LDFLAGS  = "-l#{Config::CONFIG["RUBY_SO_NAME"]}"
$LDCMD    = "#{Config::CONFIG['LDSHARED']}"

# These headers will be added as #include's in the files generated by
# mkwrap.rb
$HEADERS  = [ "'<ruby.h>'" ]

case RUBY_PLATFORM
when /darwin/
    glut_h = '/System/Library/Frameworks/GLUT.framework/Headers/glut.h'
    $HEADERS << "'<GLUT/glut.h>'"
    $LDCMD = 'cc -bundle'
    $LDFLAGS << ' -framework GLUT'
else
    glut_h = '/usr/include/GL/freeglut_std.h'
    glut_h = '/usr/include/GL/glut.h' unless File.exist?( glut_h )
    $HEADERS << "'<GL/glut.h>'"
    $INCLUDES << ' -L/usr/lib'
    $LDFLAGS  << ' -lglut -lGL' # must not be for all targets
end

task :default => [ "glut.#{Config::CONFIG['DLEXT']}" ]

rule '.o' => '.c' do |t|
    cmd = "cc #{$INCLUDES} #{$CFLAGS} -c -o #{t.name} #{t.source}"
    puts "============== #{cmd}"
    sh cmd
end

file "glut.#{Config::CONFIG['DLEXT']}" => [ 'glut.o' ] do |t|
    cmd = "#{$LDCMD} #{$LDFLAGS} #{$CFLAGS} -o #{t.name} #{t.prerequisites.join(' ')}"
    puts "============== #{cmd}"
    sh cmd
end

file 'glut.c' => [ 'glut_wrap.c', 'glut_init.c' ] do |t|
    sh "cat #{t.prerequisites.join(' ')} > glut.c"
end

# Its not right to have three tasks that do the ruby mkwrap...
# Perhaps a new :mkwrap task and then these three depend on it
file 'glut_init.c' => [ 'mkwrap.rb' ] do
    ruby "mkwrap.rb #{glut_h} glut #{$HEADERS.join(' ')}"
end

file 'glut_wrap.c' => [ 'mkwrap.rb' ] do
    ruby "mkwrap.rb #{glut_h} glut #{$HEADERS.join(' ')}"
end

# Local Variables: ***
# ruby-indent-level: 4 ***
# End: ***
