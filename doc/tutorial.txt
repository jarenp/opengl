Usage tutorial
==============

Naming conventions
------------------

The bindings contains three modules:
* 'Gl' - OpenGL functions itself
* 'Glu' - OpenGL Utility Library API - higher-level drawing routines, NURBS etc.
* 'Glut' - OpenGL Utility Toolkit - low level functions such as creating OpenGL
  context, opening window or handling user input

You can import all three modules by calling

    {{ruby}}
    require 'opengl'

You can also load the modules separately by using:

    {{ruby}}
    require 'gl'
    require 'glu'
    require 'glut'

The functions and constants are named the same as their C counterparts:

    {{ruby}}
    require 'opengl'
    ...
    Gl.glFooBar( Gl::GL_FOO_BAR )
    Glu.gluFooBar( Glu::GLU_FOO_BAR )
    Glut.glutFooBar( Glut::GLUT_FOO_BAR )

This is the 'full' syntax, usefull when you are expecting name clashes
with other modules, or just want to be formal ;) More often, you will
want to use the 'C-style' syntax, which you can accomplish by using 'include'
to exporting the module functions and constants to global namespace:

    {{ruby}}
    require 'opengl'
    include Gl,Glu,Glut
    ...
    glFooBar( GL_FOO_BAR )
    gluFooBar( GLU_FOO_BAR )
    glutFooBar( GLUT_FOO_BAR )

Finally, you can use the 'old' syntax:

    {{ruby}}
    require 'opengl'
    ...
    # Note the missing prefixes in functions and constants
    # and also capitalization of module names
    GL.FooBar( GL::FOO_BAR )
    GLU.FooBar( GLU::FOO_BAR )
    GLUT.FooBar( GLUT::FOO_BAR )

This was syntax used by previous ruby-opengl versions; some people also
consider it as being more in the spirit of OO programming. It has one
downside though - due to Ruby's naming scheme, you cannot use constants
which begins with number, e.g. GL_2D would under this syntax be (GL::)2D
which is illegal.

All three variants of syntax will continue to be supported in future,
so it's up to you which one you choose to use.

The Examples
-----------

Various examples are in 'examples' directory. To run them, manually pass them to `ruby` like:

    ruby some_sample.rb

On windows, you may want to use 'rubyw' instead, which displays the standard output window
as some examples use the console for usage info etc.

If you get 'opengl not found' error, and you installed ruby-opengl from gems, your
shell or ruby installation is probably not configured to use the gems; in that case type:

    ruby -rubygems some_sample.rb

The `README` file in the `examples` directory contains some notes on the examples.

GLUT callbacks
--------------

The GLUT callback functions are specified as Proc objects, which you can
either create with lambda as:

    {{ruby}}
    reshape = lambda do |w, h|
      ...
    end
    ...
    glutReshapeFunc( reshape )

or by conversion from normal functions:

    {{ruby}}
    def reshape(w,h)
      ...
    end
    ...
    glutReshapeFunc( method("reshape").to_proc )
    
Note: An older notation you'll see instead of `lambda` is `proc`. The
PickAxe v2 notes that `proc` is "mildly deprecated" in favor of `lambda`.
You'll also sometimes see `Proc.new` used in place of either. Pages 359-360 of
PickAxe v2 describe the differences between using `lambda` and `Proc.new`,
but for our purposes either will be fine.

Source code layout
------------------

The directory structure follows current Ruby standards, with a few
extra directories added.

* `doc/` -- Contains documentation for the project (from which this
  website is generated).
* `examples/` -- Example programs.
* `ext/` -- Contains subdirectories, one for each of the three extension
  modules (gl, glu, glut). Herein are the files needed to compile the extension
  modules.
* `lib/` -- Files that the user is meant to `require` in their own code.
* `test/` -- Contains automatic testsuite for the bindings
* `utils` -- Some utility scripts used to help generate code, documentation
  and website.
* `website` -- After running `rake gen_website` this directory will contain
  the ruby-opengl website.

