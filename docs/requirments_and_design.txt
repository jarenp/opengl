ruby-opengl requirements, design and specs
==========================================

This document records the requirements, high-level design and the
specifications for the ruby-opengl project.

The content of this document was gleaned from the postings on the
ruby-opengl-dev list and internal notes from John G. Peter M. Vo Minh Thu
and Robert K.

Requirements
------------

* Ruby-opengl is a ruby extension library for OpenGL and related APIs.

* ruby-opengl shall provide three base modules: BaseGL, BaseGLU and
  BaseGLUT (the "Base Modules").

  Note: "BaseGL" etc. are not the names that appear in the code, they are
  just handles so we can write about them in documents like this one.  The
  actual namespace names, e.g.,  "GL" vs. "Gl".  will require further
  dicussion.

* The Base Modules shall be separately loadable.

* BaseGL shall not depend on any of the other modules.

* BaseGLU shall depend on, at most, BaseGL.

* BaseGLUT shall depend on, at most, BaseGL.

* Base Module syntax shall closely follow the standard C-syntax.

  The syntax for a ruby program that uses the base modules, shall closely
  follow the standard C-like syntax that OpenGL programmers are used to,
  and that most OpenGL examples are published in. Something like:

    require 'GL/gl'

    GL.glBegin(GL::GL_POLYGON)
      GL.glVertex2d( 0, 0 )
      GL.glVertex2d( 0, 1 )
      GL.glVertex2d( 1, 1 )
      GL.glVertex2d( 1, 0 )
   GL.glEnd

  Or:

    require 'GL/gl'
    include 'GL'

    glBegin(GL_POLYGON)
      glVertex2d( 0, 0 )
      glVertex2d( 0, 1 )
      glVertex2d( 1, 1 )
      glVertex2d( 1, 0 )
   glEnd

  The rationale for adopting the C-like syntax is:
    * Makes it familiar to OpenGL programmers.
    * Removes the burden of learning OpenGL plus some ruby-isms, just to
      get started.
    * Makes it easier to port OpenGL programs to/from ruby-opengl.
    * The current OpenGL documentation more naturally fits ruby-opengl.
    * Putting "gl", "glu" and "glut" in front of all the names (i.e.,
      following the C-liek syntax) leaves common variable names open for
      the programmers (e.g., "vertex", "color" etc. are popular topics in
      3D programming, so not robbing the ruby namespace of such valuable
      real-estate seems nice).

* It shall be possible to check out the project from svn, compile and test
  on the following platforms: Mac OS X, Linux, Windows/XP

* Provide backwards compatiblity for script 0.34 pre2 (possibly in a layer
  built on top of the Base layers).  The support should be as minimally
  invasive as possible, perhaps just: require 'prev_gl'

* The project will make pre-compiled extensions available as gems

* The project will make a development environment suitable for porting to
  other platforms available via checkout from the svn repository

* There shall be a test suite that excercises each call in each of the Base
  modules.

* All project documentation will be in Markdown format in files that end in
  .txt

* Do we need to track versions of OpenGL?  Perhpas we need a 1.x and 2.x
  streams?

### Things in the future

Once the base modules are implemented, there are several ideas on things to
do next.  This list is not really requirements, but a list of nice ideas to
try:

* Provide wrappers for glBegin/glEnd, eg: polygon()...translates to
  glBegin(GL_POLYGON)....glEnd

* Untyped versions of the multi-typed gl functions:  e.g., a single
  glVertex that examines its arguments and calls the appropriate
  glVertex{234}{fisdv} call in BaseGL.


Design
------

Implementation
--------------

### The build environment

* Should use rake

* Minimize the tools (try to only use rake)

### The SWIG issue

When the ruby-opengl project re-started, Peter decided to try SWIG, as it
seemed easier than doing everything by hand.  After some experience, we
began to question whether SWIG was necessary/helpful for a project of this
nature.   The current leaning is that people want to abandon SWIG and go
back to maintaining the binding files by hand.   This section outlines some
of the reasons for that:

Pro-SWIG:

* Could use the .i files for another project, perhaps (otoh, we couldn't
  use previous .i files on this project...)

* Supposed to be less manual

Con-SWIG:

* Yet another tool to learn

* OpenGL isn't really all that big

* OpenGL doesn't change a lot

* A lot of boiler plate and overhead in the generated files because SWIG is
  a general tool.


Roadmap
-------

* Prototype the minimum necessary to get an OpengGLHelloWorld workging, so
  we can play with

* Get basic build up and running

* Get BaseGL implemented

* Get BaseGLUT implemented (because its used for testing)

* Get BaseGLU implemented

* Publish a history.txt document that describes the history of ruby-opengl
  starting with Yoshi, through John's web-site and then to the current
  ruby-forge project.
